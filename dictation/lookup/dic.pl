#!/usr/bin/perl

# Last Edit: 2008 Jun 26, 05:45:49 PM
# $Id: /cloze/branches/lookup/dic.pl 1542 2007-10-28T07:32:25.305379Z greg  $

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

my $man = 0;
my $help = 0;

GetOptions (
	'help|?' => \$help, man => \$man) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

use IO::All;
use YAML qw/LoadFile/;
use Parse::RecDescent;
use Text::Template;
use Cloze qw/cloze/;
use List::Util qw/shuffle/;

our $RD_HINT = 1;

my $round = LoadFile( "round.yaml" );
my $league = LoadFile( "../league.yaml" );
my @members = @{$league->{member}};
my %ids = map { $_->{name} => $_->{id} } @members;
my %names = map { $_->{id} => $_->{name} } @members;

my $textSources = $round->{texts};
my $unclozeables = $round->{unclozeables};

my @io = map {io $_} @$textSources;
my %next;
for my $directory (@io) 
{
	my $i = 0;
		my $blanks = { A => 0, B => 0 };
		my @text;
	while ( my $file = $directory->next )
	{
		next unless $file =~ m/\.txt$/;
		my @lines = $file->getlines;
		push @text, @lines;
	}
		($blanks, @text) =
			cloze($blanks, $unclozeables, @text);
		$next{$directory} = nextText(@text);
}

my $tmpl = io 'dic.tmpl';
my $tmplString = $tmpl->all;

my $groups = $round->{group};

my @latex = (
		{ page => 1, xy => "8,0" },
		{ page => 1, xy => "0,0" },
		{ page => 1, xy => "8,8" },
		{ page => 1, xy => "0,8" },
		{ page => 2, xy => "8,0" },
		{ page => 2, xy => "0,0" },
		{ page => 2, xy => "8,8" },
		{ page => 2, xy => "0,8" },
		{ page => 3, xy => "8,0" },
		{ page => 3, xy => "0,0" },
		{ page => 3, xy => "8,8" },
		{ page => 3, xy => "0,8" },
	);
my $paging = 0;
my $threepages = 0;

foreach my $group ( keys %$groups )
{
	next unless $round->{group}->{$group};
	my @group =  map { { name => $_, id => $ids{$_} } }
				values %{$round->{group}->{$group}}; 
	my @text = map { $next{$textSources->[$_]}->() } 0..$#$textSources;
	if ( $#group == 1 ) 
	{
		my @dic;
		for my $n ( 0..$#text )
		{
			$dic[$n] = "Words: ";
			my $frequency = $text[$n]{dic};
			for my $word ( sort keys %$frequency )
			{
				next unless length( $word ) > 3;
				$dic[$n] .= "$word($frequency->{$word}) ";
			}
		}
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$text[0]->{A}\\\\$dic[0]}
\\end{textblock}\n";
		&paging;
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$text[1]->{A}\\\\$dic[1]}
\\end{textblock}\n";
		&paging;
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$text[2]->{A}\\\\$dic[2]}
\\end{textblock}\n";
		&paging;
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$text[3]->{A}\\\\$dic[3]}
\\end{textblock}\n";
		&paging;
	}
	elsif ( $#group == 2 ) 
	{
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$group[0]->{name}}
{$group[1]->{name} \\& $group[2]->{name}}
{$text[0]}
{$text[3]}
{$text[5]}
{$text[6]}
{$text[9]}
{$text[11]}
\\end{textblock}\n";
		&paging;
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$group[1]->{name}}
{$group[2]->{name} \\& $group[0]->{name}}
{$text[1]}
{$text[2]}
{$text[5]}
{$text[7]}
{$text[8]}
{$text[11]}
\\end{textblock}\n";
		&paging;
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$group[2]->{name}}
{$group[1]->{name} \\& $group[0]->{name}}
{$text[1]}
{$text[3]}
{$text[4]}
{$text[7]}
{$text[9]}
{$text[10]}
\\end{textblock}\n";
		&paging;
	}
	elsif ($group eq 'Bye')
	{	
		my $byes = $round->{group}->{Bye};
		foreach my $byer ( @$byes )
		{
			$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$byer $ids{$byer}}
{$byer $ids{$byer}}
{$byer! No homework needed. Take a break this week. You win 3 points. \\rule{8.5cm}{1pt}}
{No homework needed. Take a break this week. You win 3 points. \\rule{8.5cm}{1pt}}
{No homework needed. Take a break this week. You win 3 points.}
\\end{textblock}\n";

			&paging;
		}
	}
}

$tmplString .= '
\end{document}
';

my $quiz;
# $quiz->{cardIdentifier} = join ' ', map { m{^/.*/.*/(.*)$};$1 } @$textSources;
$quiz->{cardIdentifier} = join ' ', map { m/([^\/]*)$/ } (glob $$textSources[0] . "/*.txt");
$quiz->{autogen} = "% This file, cards.tex was autogenerated on " . localtime() . "by dic.pl out of cards.tmpl";

my $template = Text::Template->new(TYPE => 'STRING', SOURCE => $tmplString
				, DELIMITERS => [ '<TMPL>', '</TMPL>' ] );
open TEX, ">cards.tex";
print TEX $template->fill_in( HASH => $quiz );

sub nextText
{
	my @texts = @_;
	my $number = @texts;
	my $index = 0;
	my ($nextText, $nextFile);
	return sub
	{
		$nextText = $texts[$index];
                if (++$index == $number)
                {
                        $index = 0;
                        @texts[0..$number-1] = @texts[shuffle(0..$number-1)];
                }
		# $index = int rand( $number );
		return $nextText;
	};
}

sub paging
{	if ($paging == 3 or $paging == 7 or $paging == 11 )
	{
		$tmplString .= "
\\begin{tiny}" . ($threepages + $latex[$paging]->{page}) . "\\end{tiny}\\newpage\n\n";
	}
	if ($paging == 11) { $threepages = $threepages+3; $paging = 0; }
	else { $paging++; }
}

__END__

=head1 NAME

Lookup a dictionary for the words in dialog

=head1 SYNOPSIS

./dic.pl

./form.pl

./scoresheet.pl

./grade

=head1 DESCRIPTION

B<dic.pl> generates a list of all the words in the dialog, which are blanked except for first and last letters.

Students can choose words from the list below the dialog.

B<form.pl> makes up the form for the other side of the piece of paper.

B<scoresheet.pl> creates B<scores.yaml>, a YAML-style template file that can be filled in with the number of letters correct.

B<grade> grades the scores and writes a report.

=cut
