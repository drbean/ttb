#!/usr/bin/perl

# Last Edit: 2008 Jun 26, 05:01:18 PM
# $Id: /cloze/branches/hw/dic.pl 853 2006-10-04T04:27:17.638056Z greg  $

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

my $man = 0;
my $help = 0;

GetOptions (
	'help|?' => \$help, man => \$man) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

use IO::All;
use YAML qw/LoadFile/;
use Parse::RecDescent;
use Text::Template;
use Cloze qw/cloze/;
use Games::Tournament::RoundRobin;
use Games::League::Member;

my $round = LoadFile( "round.yaml" );
my $league = LoadFile( "../class.yaml" );
my @members = @{$league->{member}};
my %ids = map { $_->{name} => $_->{id} } @members;
my %names = map { $_->{id} => $_->{name} } @members;

my $textSources = $round->{texts};

my @io = map {io $_} @$textSources;
my %texts;
my %next;
for (@io) 
{
	my $i = 0;
	while ( my $file = $_->next )
	{
		my @lines = $file->getlines;
		$texts{$_}[$i++] = cloze(@lines);
	}
	$next{$_} = nextText($texts{$_});
}

my $tmpl = io 'dic.tmpl';
my $tmplString = $tmpl->all;

my $groups = $round->{group};

my @latex = (
		{ page => 1, xy => "8,0" },
		{ page => 1, xy => "0,0" },
		{ page => 1, xy => "8,8" },
		{ page => 1, xy => "0,8" },
		{ page => 2, xy => "8,0" },
		{ page => 2, xy => "0,0" },
		{ page => 2, xy => "8,8" },
		{ page => 2, xy => "0,8" },
		{ page => 3, xy => "8,0" },
		{ page => 3, xy => "0,0" },
		{ page => 3, xy => "8,8" },
		{ page => 3, xy => "0,8" },
	);
my $paging = 0;
my $threepages = 0;

foreach my $group ( keys %$groups )
{
	next unless $round->{group}->{$group};
	my @group =  map { { name => $_, id => $ids{$_} } }
						@{$round->{group}->{$group}}; 
	my @text = map { $next{$textSources->[$_]}->() } 0..$#$textSources;
	if ( $#group == 1 ) 
	{
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$group[0]->{name}}
{$group[1]->{name}}
{$text[0]}
{$text[2]}
{$text[4]}
\\end{textblock}\n";
		&paging;
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$group[1]->{name}}
{$group[0]->{name}}
{$text[1]}
{$text[3]}
{$text[5]}
\\end{textblock}\n";
		&paging;
	}
	elsif ( $#group == 2 ) 
	{
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$group[0]->{name}}
{$group[1]->{name} \\& $group[2]->{name}}
{$text[0]}
{$text[3]}
{$text[5]}
{$text[6]}
{$text[9]}
{$text[11]}
\\end{textblock}\n";
		&paging;
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$group[1]->{name}}
{$group[2]->{name} \\& $group[0]->{name}}
{$text[1]}
{$text[2]}
{$text[5]}
{$text[7]}
{$text[8]}
{$text[11]}
\\end{textblock}\n";
		&paging;
		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$group[2]->{name}}
{$group[1]->{name} \\& $group[0]->{name}}
{$text[1]}
{$text[3]}
{$text[4]}
{$text[7]}
{$text[9]}
{$text[10]}
\\end{textblock}\n";
		&paging;
	}
	elsif ($group eq 'Bye')
	{	
		my $byes = $round->{group}->{Bye};
		foreach my $byer ( @$byes )
		{
			$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$byer $ids{$byer}}
{$byer $ids{$byer}}
{$byer! No homework needed. Take a break this week. You win 3 points. \\rule{8.5cm}{1pt}}
{No homework needed. Take a break this week. You win 3 points. \\rule{8.5cm}{1pt}}
{No homework needed. Take a break this week. You win 3 points.}
\\end{textblock}\n";

			&paging;
		}
	}
}

$tmplString .= '
\end{document}
';

my $quiz;
#$quiz->{cardIdentifier} = $textSources ) =~ 
#			s{.*/(\w+/\w+)/?$}{$1};
$quiz->{cardIdentifier} = join ' ', map { m{^/.*/.*/(.*)$};$1 } @$textSources;
$quiz->{autogen} = "% This file, cards.tex was autogenerated on " . localtime() . "by dic.pl out of cards.tmpl";

my $template = Text::Template->new(TYPE => 'STRING', SOURCE => $tmplString
				, DELIMITERS => [ '<TMPL>', '</TMPL>' ] );
open TEX, ">cards.tex";
print TEX $template->fill_in( HASH => $quiz );

sub nextText
{
	my $texts = shift;
	my $number = $#$texts;
	my $index = 0;
	my ($nextText, $nextFile);
	return sub
	{
		$nextText = $texts->[$index];
		# $index = 0 if $index++ == $number;
		$index = int rand( $number + 1 );
		my $textA = join '', @{$nextText->{A}};
		my $textB = join '', @{$nextText->{B}};
		return ( $textA, $textB );
	};
}

sub paging
{	if ($paging == 3 or $paging == 7 or $paging == 11 )
	{
		$tmplString .= "
\\begin{tiny}" . ($threepages + $latex[$paging]->{page}) . "\\end{tiny}\\newpage\n\n";
	}
	if ($paging == 11) { $threepages = $threepages+3; $paging = 0; }
	else { $paging++; }
}

__END__

=head1 NAME

First and last

=head1 SYNOPSIS

./dic.pl

./form.pl

./scoresheet.pl

./grade

=head1 DESCRIPTION

Both A and B forms of a dialog are blanked except first and last letters.

B<dic.pl> generates 2 versions of the dialog, one for each of the roles in the conversation. The difference is there are fillable squares only for one role on one card, and fillable squares for only the other role on the other card.

This makes it suitable for pairs listening to a tape, or a reader.

=cut
