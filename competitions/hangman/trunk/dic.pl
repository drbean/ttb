#!/usr/bin/perl

# Last Edit: 2005 Dec 02, 10:43:40 PM

use strict;
use warnings;

use List::Util qw/shuffle/;
use IO::All;
use YAML qw/LoadFile DumpFile/;
use Parse::RecDescent;
use Text::Template;

my $leagueRound = $ARGV[0];
my $yaml = LoadFile("$leagueRound.yaml");
my $tables = $yaml->{tables};
my $id = $yaml->{id};

my $e = io '/home/greg/li/restaurant/hangman.txt';
my @txt = shuffle $e->slurp; # must be more lines than players

my $io = io 'cards.tmpl';
my $texString = "% This file, cards.tex was autogenerated on " . localtime() . "by dic.pl.";
$texString .= $io->all;

our $blanks;
our @text;
our $lineN = 0;
our %dic;
our $entry;

my $players = 4;

our $RD_HINT=1;

foreach my $line ( @txt ) 
{
	my $letterGrammar = q[
	{ my $skip = ''; my ($letter, $word, $inword) = (0,0,0) }
	string: token(s) end | <error>
	token: punctuation | firstletter | followingletter
	punctuation: m/[^A-Za-z0-9']+/ 
		{
			$inword=0;
			push @{$::text[$::lineN]}, [$word, $letter, $item[1]]; 
			$word++;
			$letter = 0;
		}
	firstletter: <reject: $inword> m/[a-z0-9]/i 
		{
			$inword=1;
			push @{$::text[$::lineN]}, [$word, $letter, $item[2]];
			$letter++;
		}
	followingletter: <reject: not $inword> m/[a-z0-9']/i
		{
			$::blanks++;
			push @{$::text[$::lineN]}, [$word, $letter, $item[2]];
			$letter++;
		}
	end: m/^\Z/
	]; 

	my $wordGrammar = q[
	string: token(s) end | <error>
	token: punctuation | word
	punctuation: m/[^A-Za-z0-9']+/ 
	word: m/[a-z0-9][a-z0-9']*/i { $::dic{ $item[1] }++; }
	end: m/^\Z/
	]; 

	my $letterParser = Parse::RecDescent->new($letterGrammar);
	defined $letterParser->string($line) or die "letterparse died: $?\n";

	my $wordParser = Parse::RecDescent->new($wordGrammar);
	defined $wordParser->string($line) or die "wordparse died: $?\n";

	$lineN++;
}
my $quiz;
my %prompText;
my %prompWords;
my %checkAnswers;
my %blankedText;
my %blanksAlloted;

my $punctuation = qr/[^A-Za-z0-9']+/;
my $letter = qr/[A-Za-z0-9']/;
my $inword = 0;

my $playerN = 0;
foreach my $table ( keys %$tables )
{
	my $players = $tables->{$table}->{player};
	foreach my $player ( @{$players} )
	{
		my $word = '';
		my $wordN = 0;
		my %playerDic;
		$prompText{$player} = $text[$playerN];
		$blankedText{$player} = '';
		my $playerKey = "$id->{$player} $player";
		$checkAnswers{$playerKey} = '';
		@playerDic{keys %dic} = (0) x (keys %dic);
		my $letterN = 0;
		$inword = 0;
		foreach my $glyph ( @{$text[$playerN]} )
		{
			$checkAnswers{$playerKey} = join '',
					$checkAnswers{$playerKey}, $glyph->[2];
			if ( $text[$playerN][$letterN][2] =~ $punctuation )
			{
				$blankedText{$player} =
					join '', $blankedText{$player},
							$text[$playerN][$letterN][2];
				$inword = 0;
				$playerDic{$word}-- if $word;
				$word = '';
				$wordN++;
			}
			elsif ( $text[$playerN][$letterN][2] =~ $letter and $inword == 0 )
			{
				$blanksAlloted{$player}++;
				$blankedText{$player} =
					join '', $blankedText{$player},
				'\begin{tiny}'. ($wordN+1) . '\end{tiny}\x';
				$inword = 1;
				@{$prompWords{$player}->[$wordN]} =
						($text[$playerN][$letterN][2]);
			}
			elsif ($text[$playerN][$letterN][2] =~ $letter )
			{
				$blanksAlloted{$player}++;
				$blankedText{$player} =
					join '', $blankedText{$player}, 'x';
				push @{$prompWords{$player}->[$wordN]}, 
							$text[$playerN][$letterN][2];
			}
			$letterN++;
		}
		$quiz->{"dic$player"} = '';
		$checkAnswers{$playerKey} = join "\t", 
			$blanksAlloted{$player}, $checkAnswers{$playerKey};
		foreach my $word (sort keys %dic)
		{
			$quiz->{"dic$player"} = join ' ',
							($quiz->{"dic$player"}, 
				"$word(@{[$dic{$word}+$playerDic{$word}]})") 
					if $dic{$word} + $playerDic{$word};
		}
		$playerN++;
	}
}

my $pageN=1;
my %latex;
$latex{xy} = ['8,0', '0,0', '0,4', '8,4','8,8', '0,8', '0,12', '8,12'];
$latex{label} = [2,1,3,4,6,5,7,8];
my $paperPosition = 0;
LATEXLOOP: while ( my $table = each %$tables )
{
	$paperPosition = $paperPosition % 8;
	foreach my $player (@{$tables->{$table}->{player}})
	{
		$texString .= "\\begin{textblock}{8}($latex{xy}[$paperPosition])
\\textblocklabel{picture$latex{label}[$paperPosition]}
\\mycard{A}
{$table}
{";
		my $line;
		foreach my $next ( @{$prompText{$player}} ) 
		{
			push @$line, $next unless $next->[2] =~ $punctuation;
		}
		# push @$line, [undef, undef, undef];
		while (my $next = (shift @$line))
		{
			# last if ($next->[2] =~ m/\n/);
			next if (defined $next and 
					($next->[2] !~ $letter));
			my $last = 0;
			foreach my $column ( 0..3 ) 
			{
				$last = 1 if (defined $next and ($next->[2] =~ m/\n/));
				my ($wordN, $letterN, $glyph);
				($wordN, $letterN, $glyph) = @$next
								if ($next);
				if (defined $wordN) { $wordN++ }
				else { $wordN = '-'; }
				if (defined $letterN) {$letterN++}
				else { $letterN = '-'; }
				$glyph ||= '-';
				$texString .= 
					($wordN).'&'.($letterN).'&'.$glyph;
				last if ($column == 3);
				$next = shift @$line;
				$texString .= '&';
			}
			last if $last;
			$texString .= '\\\\ \hline
';
		}
		foreach my $opponent (@{$tables->{$table}->{player}})
		{
			$texString .= 
			"}{$opponent $id->{$opponent}}{$blankedText{$opponent}"
						unless ( $opponent eq $player );
		}
		$texString .= "}\n\\end{textblock}\n\n";
		$paperPosition++;
	}
	if ($paperPosition == 8)
	{
		# $texString.= "\\begin{tiny}$pageN\\end{tiny}\\\\\n\\newpage"
		$texString .= "\\begin{tiny}$pageN\\end{tiny}\\newpage\n\n";
		$pageN++;
	}
}

$texString .= '
\end{document}
';


#$quiz->{autogen} = "% This file, cards.tex was autogenerated on " . localtime() . "by dic.pl out of cards.tmpl";
# my $template = Text::Template->new(TYPE => 'STRING', SOURCE => $tmplString
#				, DELIMITERS => [ '<tmpl>', '</tmpl>' ] );
open TEX, ">cards.tex";
# print TEX $template->fill_in( HASH => $quiz );
print TEX $texString;

open SHEET, ">check.txt";
print SHEET "$_:\t$checkAnswers{$_}" foreach sort keys %checkAnswers;
