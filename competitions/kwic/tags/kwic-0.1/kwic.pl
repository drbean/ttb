#!/usr/bin/perl

# Last Edit: 2013 Oct 01, 09:53:48 PM
# $Id: /kwic/tags/kwic-0.1/kwic.pl 1227 2007-05-28T23:53:18.701708Z greg  $

use warnings;
use strict;
use lib qw[/home/greg/clair/clairlib/lib];

use IO::All;
use YAML qw/LoadFile DumpFile/;
use Parse::RecDescent;
use Text::Template;
# use Kwic qw/kwic/;
# use Clair::Cluster;
# use String::Similarity;

# my $round = LoadFile( "round.yaml" );
# my $league = LoadFile( "../league.yaml" );
# my @members = @{$league->{member}};
# my %ids = map { $_->{name} => $_->{id} } @members;
# my %names = map { $_->{id} => $_->{name} } @members;
use Grades;
use Grades::Groupwork;
my $l = League->new( leagues => '/home/drbean/021', id => "yd40001280" );
my $g = Grades->new({ league => $l });
my $cl = $g->classwork;

# my $textSources = $round->{texts};
my $textSources = [ "/home/drbean/class/college/greetings" ];
my @dirs = map {io $_} @$textSources;
my $concordances;
my $next;
my $shuffle;

# my $cluster = Clair::Cluster->new;
# $cluster->load_file_list_array(@dirs, type => 'text' );

foreach my $dir ( @dirs )
{
    my $concordance = $concordances->{$dir};
    my @files = $dir->all_files;
	while ( my $file = $dir->next )
	{
		next unless $file =~ m/\.txt$/;
		my @lines = $file->getlines;
		# chomp @lines; # XXX
		# map { s/\\\\\$// } @lines; # XXX
		foreach my $line ( @lines ) 
		{
			my @words = split /\b/, $line;
			my $n = 2;
			while ( $n <= $#words-1 ) 
			{
				my $word = $words[$n];
				if ($word=~m/^\w+$/ && $words[$n+1]=~m/^[-']$/)
				{
					$word .= $words[$n+1].$words[$n+2];
					$words[$n] = $word;
					splice @words, $n+1, 2;
				}
				my $key = lc $word;
				if ( $key =~ m/^\w/ )
				{
					my $pretext = join '', @words[0..$n-1];
					my $posttext = join '', @words[$n+1..$#words];
					push @{$concordance->{$key}->{$file}},
					    { pretext => [@words[0..$n-1]],
					    keyword => $word,
					    posttext => [@words[$n+1..$#words]] };
				}
				$n++;
			}
		}
	}
    for my $key ( keys %{$concordance} )
     {
	 # delete $concordance->{$key} if grep { not defined $concordance->{$key}->{$_} } @files;
	 $shuffle->{$dir}->{$key} = nextExample($concordance->{$key});
     }
	 my $name = $dir->name;
	 $next->{$dir} = nextKeyword("$dir");
     $concordances->{$dir} = $concordance;
}

my $tmpl = io 'kwic.tmpl';

my $tmplString = $tmpl->all;

my $groups = $cl->beancans(1);

my @latex = (
				{ page => 1, xy => "8,0" },
				{ page => 1, xy => "0,0" },
				{ page => 1, xy => "8,8" },
				{ page => 1, xy => "0,8" },
				{ page => 2, xy => "8,0" },
				{ page => 2, xy => "0,0" },
				{ page => 2, xy => "8,8" },
				{ page => 2, xy => "0,8" },
				{ page => 3, xy => "8,0" },
				{ page => 3, xy => "0,0" },
				{ page => 3, xy => "8,8" },
				{ page => 3, xy => "0,8" },
		);
my $paging = 0;
my $threepages = 0;
my %totalScore;

foreach my $group ( keys %$groups )
{
    # my @roles = keys %{$groups->{$group}};
	my $members =  $groups->{$group};
	# next unless @group;
	# next if grep {$_ eq 'Bye'} @roles;
	foreach my $player ( @$members ) 
    {
        my $partners = join ' \& ', grep { $_ ne $player } @$members;
        my $score    = 1;
        my @pairs = map { $next->{$_}->() } @$textSources;
        my $n = 0;
        my @lines = map {
                my $spaces = length $_->[0]->{keyword};
                my $cloze1  = join '',
                  map { "\\1{$_}" } $score .. $score + $spaces - 1;
                $score = $score + $spaces;
                my $cloze2  = join '',
                  map { "\\1{$_}" } $score .. $score + $spaces - 1;
                $score = $score + $spaces;
                $totalScore{$player} = $score - 1;
                join( '', ++$n . ".",
		@{ $_->[0]->{pretext} }, $cloze1, @{ $_->[0]->{posttext} },
		'\\\\',
		# @{ $_->[1]->{pretext} }, $cloze2, @{ $_->[1]->{posttext} }
                , '\\\\' )
        } @pairs;

        $tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$player}
{$partners}
{@lines}
\\end{textblock}\n";
        &paging;
    }
}

$tmplString .= '
\end{document}
';

my $quiz;
#$quiz->{cardIdentifier} = $textSources ) =~ 
#						s{.*/(\w+/\w+)/?$}{$1};
$quiz->{cardIdentifier} = join ' ', map { m{.*/(\w+)$};$1 } @$textSources;
$quiz->{autogen} = "% This file, cards.tex was autogenerated on " . localtime() . "by dic.pl out of cards.tmpl";

my $template = Text::Template->new(TYPE => 'STRING', SOURCE => $tmplString
								, DELIMITERS => [ '<TMPL>', '</TMPL>' ] );
open TEX, ">cards.tex";
print TEX $template->fill_in( HASH => $quiz );

DumpFile( "possible.yaml", \%totalScore );

sub nextExample
{
	my $item = shift;
    my @exampleset = @$item{keys %$item};
	my (@index) = (0) x 2;
	return sub    {
	    my @examples = map { $exampleset[$_]->[ $index[$_] ] } 0 .. 1;
	    for ( 0..1 )
	    {
		$index[$_] = 0 if ++$index[$_] == @{$exampleset[$_]};
	    }
	return @examples;
	 }
}

sub nextKeyword
{
	my $dir = shift;
	my $index = 0;
	return sub    {
	    my $concordance = $concordances->{$dir};
	    my ($keyword, $fileexamples) = each %$concordance;
	    ($keyword, $fileexamples) = each %$concordance unless $keyword;
	    # my @examples = map { $_->[0] } values %$fileexamples;
	    my @examples = $shuffle->{$dir}->{$keyword}->();
		return \@examples;
	 }
}

sub paging
{		if ($paging == 3 or $paging == 7 or $paging == 11 )
		{
				$tmplString .= "
\\begin{tiny}" . ($threepages + $latex[$paging]->{page}) . "\\end{tiny}\\newpage\n\n";
		}
		if ($paging == 11) { $threepages = $threepages+3; $paging = 0; }
		else { $paging++; }
}

# vim: set ts=8 sts=4 sw=4 noet:
