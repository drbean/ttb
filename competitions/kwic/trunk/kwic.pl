#!/usr/bin/perl

# vim: set ts=8 sts=4 sw=4 noet:
# Last Edit: 2007 Jun 08, 08:15:39 AM
# $Id: /kwic/trunk/kwic.pl 1241 2007-06-09T14:15:50.417079Z greg  $

use warnings;
use strict;

use SelfLoader;
use Getopt::Long;
use Pod::Usage;

my $man = 0;
my $help = 0;

GetOptions (
    # "session=s" => \$session,
        'help|?' => \$help, man => \$man) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

use IO::All;
use YAML qw/LoadFile DumpFile/;
use Parse::RecDescent;
use Text::Template;
use List::Util qw/shuffle/;

my $round = LoadFile( "round.yaml" );
my $league = LoadFile( "../league.yaml" );
my @members = @{$league->{member}};
my %ids = map { $_->{name} => $_->{id} } @members;
my %names = map { $_->{id} => $_->{name} } @members;

my $textSources = $round->{texts};
my @dirs = map {io $_} @$textSources;
my $concordances;
my %keyList = ( I => 1 );
my $next;
my $shuffle;

# my $cluster = Clair::Cluster->new;
# $cluster->load_file_list_array(@dirs, type => 'text' );

foreach my $dir ( @dirs )
{
    my $concordance = $concordances->{$dir};
    my @files = glob "$dir/*.txt";
	while ( my $file = $dir->next )
	{
		next unless $file =~ m/\.txt$/;
		my @lines = $file->getlines;
		# chomp @lines; # XXX
		# map { s/\\\\\$// } @lines; # XXX
		foreach my $line ( @lines ) 
		{
			my @words = split /\b/, $line;
			my $n = 0;
			while ( $n <= $#words ) 
			{
				my $word = $words[$n];
				if ($word=~m/^\w+$/ && $words[$n+1]=~m/^[-']$/)
				{
					$word .= $words[$n+1].$words[$n+2];
					$words[$n] = $word;
					splice @words, $n+1, 2;
				}
				my $key = $word;
				$key = lc $key unless $key =~ m/^I'?/;
				if ( $key =~ m/^\w[\w'-]*$/ and $key !~ m/\d/ )
				{
					my $pretext = join '', @words[0..$n-1];
					my $posttext = join '', @words[$n+1..$#words];
					push @{$concordance->{$key}->{$file}},
					    { pretext => [@words[0..$n-1]],
					    keyword => $key,
					    posttext => [@words[$n+1..$#words]] };
					$keyList{$key} = 1;
				}
				$n++;
			}
		}
	}
    for my $key ( keys %{$concordance} )
     {
	if ( grep { not defined $concordance->{$key}->{$_} } @files )
	{	 delete $concordance->{$key} ;
	    next;
	}
	 $shuffle->{$dir}->{$key} = nextExample($concordance->{$key});
     }
	 my $name = $dir->name;
	 $next->{$dir} = nextKeyword("$dir");
     $concordances->{$dir} = $concordance;
}

my $tmplString = join '', <main::DATA>;

my $groups = $round->{group};

my @latex = (
				{ page => 1, xy => "8,0" },
				{ page => 1, xy => "0,0" },
				{ page => 1, xy => "8,8" },
				{ page => 1, xy => "0,8" },
				{ page => 2, xy => "8,0" },
				{ page => 2, xy => "0,0" },
				{ page => 2, xy => "8,8" },
				{ page => 2, xy => "0,8" },
				{ page => 3, xy => "8,0" },
				{ page => 3, xy => "0,0" },
				{ page => 3, xy => "8,8" },
				{ page => 3, xy => "0,8" },
		);
my $paging = 0;
my $threepages = 0;
my %totalScore;

foreach my $group ( keys %$groups )
{
	my @roles = keys %{$round->{group}->{$group}};
	my @group =  values %{$round->{group}->{$group}};
	next unless @group;
	next if grep {$_ eq 'Bye'} @roles;
	foreach my $player ( @group ) 
    {
        my $partners = join ' \& ', grep { $_ ne $player } @group;
        my $score    = 1;
        my @sameKeySets = map { $next->{$_}->() } @$textSources;
        my $n = 0;
        my @lines = map {
	    my $exampleSet = $_;
	    my $key = $exampleSet->[0]->{keyword};
                my $spaces = length $key;
		my @setString = (++$n . '. ');
		for my $index ( 0..$#$exampleSet )
		{
		    my $cloze  = join '',
		      map { "\\1{$_}" } $score .. $score + $spaces - 1;
		    $score = $score + $spaces;
		    push @setString, @{ $exampleSet->[$index]->{pretext} },
		    $cloze, @{ $exampleSet->[$index]->{posttext} }, '\\\\'
		}
		my $distractor;
	    $distractor = each %keyList
		until length $distractor == $spaces and lc $distractor ne lc $key;
	    my ($distractor1, $distractor2,) = shuffle $key, $distractor;
	    push @setString, "\\textbf{a. $distractor1 \\hspace{0.5cm}  b. $distractor2}";
                $totalScore{$player} = $score - 1;
                join( '', @setString , '\\\\', "\n" )
        } @sameKeySets;

        $tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$player}
{$partners}
{@lines}
\\end{textblock}\n";
        &paging;
    }
}

$tmplString .= '
\end{document}
';

my $quiz;
#$quiz->{cardIdentifier} = $textSources ) =~ 
#						s{.*/(\w+/\w+)/?$}{$1};
$quiz->{cardIdentifier} = join ' ', map { m{.*/(\w+)$};$1 } @$textSources;
$quiz->{autogen} = "% This file, cards.tex was autogenerated on " . localtime() . "by dic.pl out of cards.tmpl";

my $template = Text::Template->new(TYPE => 'STRING', SOURCE => $tmplString
								, DELIMITERS => [ '<TMPL>', '</TMPL>' ] );
open TEX, ">cards.tex";
print TEX $template->fill_in( HASH => $quiz );

DumpFile( "possible.yaml", \%totalScore );

sub nextExample
{
	my $item = shift;
	my @texts = keys %$item;
    my @exampleset = @$item{@texts};
	my (@index) = (0) x @texts;
	return sub    {
	    my @examples = map { $exampleset[$_]->[ $index[$_] ] } 0 .. $#texts;
	    for ( 0..$#texts )
	    {
		$index[$_] = 0 if ++$index[$_] == @{$exampleset[$_]};
	    }
	return @examples;
	 }
}

sub nextKeyword
{
	my $dir = shift;
	my $index = 0;
	return sub    {
	    my $concordance = $concordances->{$dir};
	    my ($keyword, $fileexamples) = each %$concordance;
	    ($keyword, $fileexamples) = each %$concordance unless $keyword;
	    # my @examples = map { $_->[0] } values %$fileexamples;
	    my @examples = $shuffle->{$dir}->{$keyword}->();
		return \@examples;
	 }
}

sub paging
{		if ($paging == 3 or $paging == 7 or $paging == 11 )
		{
				$tmplString .= "
\\begin{tiny}" . ($threepages + $latex[$paging]->{page}) . "\\end{tiny}\\newpage\n\n";
		}
		if ($paging == 11) { $threepages = $threepages+3; $paging = 0; }
		else { $paging++; }
}

__DATA__
<TMPL>$autogen</TMPL>
\documentclass[b5paper,landscape]{article}
% \renewcommand{\printlandscape}{\special{landscape}}
% \printlandscape
\usepackage[T1]{fontenc}
% \usepackage[absolute,noshowtext,showboxes]{textpos}
\usepackage[absolute,showboxes]{textpos}
\TPMargin{0.2cm}
\usepackage{pifont}
\usepackage{amsfonts}
\usepackage{graphicx}
% \textblockorigin{3.35cm}{3.05cm} % w5
% \textblockorigin{0.35cm}{3.05cm} % HPDeskJet810C
\textblockorigin{2.55cm}{3.05cm} % HPLaserJ5000LE
\pagestyle{empty}
\setlength{\unitlength}{1cm}
\renewcommand{\baselinestretch}{0.5}

\newcommand{\mycard}[3]{%
\tiny <TMPL>$cardIdentifier</TMPL>\\%
% \begin{minipage}[t][3.9cm][t]{8.5cm}
\begin{minipage}{12.0cm}
\normalsize \ding{220}I/We, #2, confirmed #1 wrote this. Sgd: \rule{2.0cm}{0.3pt}#2\\
% \hrulefill\\
% \end{minipage}
% \begin{minipage}{12.0cm}
% \normalsize \ding{220}1\\
% \begin{tabular}{|r|l|l|}% \hline
%\multicolumn{1}{|l|}{Prefix} & Word & \multicolumn{1}{l|}{Suffix} \\ \hline \hline
#3 % \\
% #4 \\
% \end{tabular}
\end{minipage}
% \begin{minipage}[t][3.9cm][t]{8.5cm}
}

\newcommand{\1}[1]{%
\begin{picture}(0.5,0.5)
\put (0,0){\makebox(0.5,0.5)[br]{\tiny #1}}
\put (0,0){\line(0,1){0.3}}
\put (0,0){\line(1,0){0.5}}
\put (0.5,0){\line(0,1){0.3}}
\end{picture}%
}

\newcommand{\2}{%
\includegraphics{cards.p2}%
}

\begin{document}
