#!/usr/bin/perl

# Last Edit: 2007 Apr 16, 10:41:16 PM
# $Id$

use strict;
use warnings;

my @roles;
my $win = 1;
my $bye = 1;
my $draw = 0.5;
my $loss = 0.5;

use List::Util qw/reduce sum/;

use Text::Template;
use YAML qw/ LoadFile DumpFile /;
use IO::All;

my $round = LoadFile( "./round.yaml" );
my $league = LoadFile( "../league.yaml" );
my @members = @{$league->{member}};
my %ids = map { $_->{name} => $_->{id} } @members;
my %names = map { $_->{id} => $_->{name} } @members;
my $absentees = $league->{absent}? $league->{absent}: undef;
my $roundabsent = $round->{absent};
push @$absentees, @$roundabsent if $absentees and $roundabsent;
my ($assistants, $assistantScores);
my $roundN = $round->{round};
if ( -e '../assistants.yaml' )
{
	my $assistantFile = LoadFile '../assistants.yaml';
	$assistants = $assistantFile->{$roundN};
	$assistantScores = $assistantFile->{$roundN} if defined $assistants;
	$assistants = [keys %$assistantScores];
}
elsif ( $round->{assistant} and $round->{assistant} !~ m/No.*ne/ ) {
	$assistants = $round->{assistant};
}
my $byes = $round->{group}->{Bye};

my $scoresheet = LoadFile "scores.yaml";
my $gradesheets = $league->{hw};
my $prevround = $roundN - 1;
die "Gradesheet for round $roundN, $gradesheets/g$roundN.yaml already exists,"
			if -e "$gradesheets/g$roundN.yaml";
my $prevgradefile = "$gradesheets/g$prevround.yaml";
my $prevgrades = LoadFile( $prevgradefile )
			or die "No previous $prevgradefile grade file: $!\n";

my %indScores = ();
my %indScoresByScore = ();
my %groupScores = ();
my %groupScoresByScore = ();
my %points = ();
my %pointsByPoints = ();
my %cumulative = ();
my %swiss= ();

my $groups = $round->{group};
my @indMatches;

foreach my $group ( keys %$groups )
{
	my %group =  %{$groups->{$group}}; 
	@roles = keys %group;
	my @group = values %group;
	my $questionN = (keys %{$scoresheet->{$group}->{$roles[0]}}) - 1;
	if (grep { $_ eq 'Bye' } @roles )
	{	
		my @byes = map { $ids{$_} } @group;
		for (@byes)
		{
			$points{$_} = $bye;
			$swiss{$_} = 'Bye';
			push @{$pointsByPoints{$bye}}, "$names{$_} $_  \\\\";
			die "$_ has $points{$_}?" unless $_ && exists 
			$prevgrades->{cumulative}->{$_} && exists $points{$_};
			$cumulative{$_} = $prevgrades->{cumulative}->{$_} +
								$points{$_};
			push @indMatches, 
			"$group&$names{$_} (-)&$cumulative{$_}&$win : 0&BYE&\\\\ \\hline";
		}
	}
	else
	{
		my $indMatch = "$group&";
		my (@nohomework, @groupAllocation);
		# my @number = qw/First Second Third Fourth Fifth Sixth/;
		my @number = qw/1 2 3 4 5 6 7 8/;
		my %rolequestions = ( $roles[0] => [ 4..7 ], $roles[1] => [ 0..3 ] );
		my %correct = map {
			my $role = $_;
			my $name = $round->{group}->{$group}->{$role};
			my $score = 0;
			for my $question ( @{$rolequestions{$role}} )
			{
				my $answer = $scoresheet->{$group}->{$role}->{$name};
				# die "group $group member $role was in/correct with question $question?" unless $answer =~ m/^(0|1)$/;
				$score += $answer;
			}
			$role => $score;
		} @roles;
		my %roleReport;
		foreach my $role ( @roles )
		{
			my $player = $groups->{$group}->{$role};
			$roleReport{$role} .= "$player ";
			my $playerId = $ids{$player} 
				or die "Group $group ${player}'s id?";
                        die "group is $group?" unless defined $group;
			die "No $role $player in $group" unless
				defined $scoresheet->{$group}->{$player};
			my $participationScore = 
			$scoresheet->{$group}->{$player};
			die "$player particpation?" unless
					defined $participationScore;
			if ( $participationScore )
			{
				push @groupAllocation, $playerId;
				my $indScore;
				$indScore = $participationScore?
					$correct{$role}: 0;
				$indScores{$playerId} = $indScore;
				push @{$indScoresByScore{$indScore}},
				"$group. $player $playerId\\\\";
			}
			else {
				 push @nohomework, $playerId;
				 $indScores{$playerId} = 0;
				push @{$indScoresByScore{"No play"}},
				"$group. $player $playerId\\\\";
			}
			$roleReport{$role} .= $participationScore?
				"($indScores{$playerId})&": "(No play)&";
		}
		my ( $winner, $winnerName, $winnerScore, %pointsByRole, %swissByRole );
		if ( @nohomework )
		{
			$winner = $winnerName = $winnerScore = 'No winner';
			%pointsByRole = map { my $role = $_;
				$_ => (grep m/$group{$role}/,
							@names{@nohomework})?
				0:$win;} @roles;
			%swissByRole = map { my $role = $_;
				$_ => (grep m/$group{$role}/,
							@names{@nohomework})?
				'Absent': 'Win';} @roles;
		}
		else
		{	
			$winner = $correct{$roles[0]} > $correct{$roles[1]} ?
				$roles[0]:
				$correct{$roles[0]} < $correct{$roles[1]}?
				$roles[1]: (rand( 2 ) < 1)?
				$roles[0]: $roles[1];
			$winnerName = $group{$winner};
			$winnerScore = $indScores{$ids{$winnerName}};
			%pointsByRole = map
				{ $_ => ($group{$_} eq $winnerName)?
					$win:$loss; } @roles;
			%swissByRole = map
				{ $_ => ($group{$_} eq $winnerName)?
					'Win': 'Loss'; } @roles;
		}
		$winner ||= 'No winner';
		$winnerName ||= 'No winner';
		my %roles = reverse %group;
		my $loser;
		$loser = $winner eq $roles[0]? $roles[1]: $roles[0]
						unless $winner eq 'No winner';
		my $loserName = $group{$loser} if $loser;
		$groupScores{$group} = sum map { $correct{$_} } @roles;
		my @groupsIds = @ids{@group};
		my $result = 
			"$pointsByRole{$roles[0]} : $pointsByRole{$roles[1]}&";
		my @memberScores = map { "$names{$_}($indScores{$_})" }
								@groupsIds;
		push @{$groupScoresByScore{$winnerScore}},
		# "$group. Winner: $winnerName, @memberScores\\\\ ";
		# "$group. $winnerName ($winner)\\\\ "
			"$group. $winnerName ($winner) beat $loserName ($loser).\\\\ "
						unless $winner eq 'No winner';
		for my $id ( @groupsIds )
		{
			my $name = $names{$id};
			my $role = $roles{$name};
			my $points = $pointsByRole{$role};
			$points{$id} = $points;
			$swiss{$id} = $swissByRole{$role};
			push @{$pointsByPoints{$points}}, "$name $id\\\\";
			die "$name has $points?" unless $id && $name &&
				exists $prevgrades->{cumulative}->{$id} &&
							defined $points;
			$cumulative{$id} = $prevgrades->{cumulative}->{$id} +
								$points;
			$roleReport{$role} .= "$cumulative{$id}&";
		}
		$indMatch .= $roleReport{$roles[0]} . $result . $roleReport{$roles[1]};
		chop $indMatch;
		$indMatch .= "\\\\ \\hline\n";
		push @indMatches, $indMatch;
	}
}

if ($absentees)
{
	 for ( @ids{@$absentees} )
	{	
		$points{$_} = 0;
		$swiss{$_} = 'Absent';
	}
}
@cumulative{@ids{@$absentees}} = map { $prevgrades->{cumulative}->{$_} + $points{$_} }
							@ids{@$absentees} if $absentees;
for ( keys %names )
{
	die "$names{$_} $_ has $points{$_} points?" unless $_ && 
		exists $prevgrades->{cumulative}->{$_} && exists $points{$_};
}
my %cumulativeByGrades = ();
push @{$cumulativeByGrades{$cumulative{$_}}}, "$names{$_} $_ \\\\ "
					foreach keys %names;
my $grades;
$grades->{cumulative} = \%cumulative;
$grades->{$roundN} = \%points;
my %pairingNumberGrades;
my %swissByName;
for my $member ( @members )
{
	$pairingNumberGrades{$member->{pairingnumber}} = $points{$member->{id}} 
				if $member->{pairingnumber};
	$swissByName{$member->{name}} = $swiss{$member->{id}};
	
}

DumpFile( "$gradesheets/cumulative.yaml", \%cumulative );
DumpFile( "$gradesheets/g$roundN.yaml", $grades );
DumpFile( "$gradesheets/p$roundN.yaml", \%pairingNumberGrades );
DumpFile( "$gradesheets/$roundN.yaml", \%swissByName );
DumpFile( "round.yaml", $round );

@{$pointsByPoints{$_}} = sort @{$pointsByPoints{$_}} foreach keys %pointsByPoints;
@{$cumulativeByGrades{$_}} = sort @{$cumulativeByGrades{$_}}
						foreach keys %cumulativeByGrades;
my @indReport = map
	{ "\\vspace{-0.4cm} \\item [$_:] \\hspace*{0.5cm}\\\\@{$indScoresByScore{$_}}" }
		sort {$a cmp $b} keys %indScoresByScore;
my @groupReport = map 
	{ "\\vspace{-0.4cm} \\item [$_:] \\hspace*{0.5cm}\\\\@{$groupScoresByScore{$_}}" }
		sort {$a<=>$b} keys %groupScoresByScore;
my @pointReport = map 
	{ "\\vspace{-0.4cm} \\item [$_:] \\hspace*{-0.5cm}\\\\@{$pointsByPoints{$_}}" }
		sort {$a<=>$b} keys %pointsByPoints; # XXX move to left someway
my @cumulReport = map 
	{ "\\vspace{-0.4cm} \\item [$_:] \\hspace*{0.5cm}\\\\@{$cumulativeByGrades{$_}}" }
		sort {$a<=>$b} keys %cumulativeByGrades;
my @assistantScores = map
	{ "\\vspace{-0.4cm} $_: $assistantScores->{$_} \\hspace{0.5cm}" }
			@$assistants if $assistants;
my @byeScores = map
	{ "\\vspace{-0.4cm} $_: $points{$ids{$_}} \\hspace{0.5cm}" }
								@$byes;

my $report;
$report->{league} = $league->{league};
$report->{week} = $round->{week};
$report->{round} = $roundN;
$report->{indMatches} = join '', sort @indMatches;
$report->{indScores} = join '', @indReport;
$report->{groupScores} = join '', @groupReport;
$report->{points} = join '', @pointReport;
$report->{grades} = join '', @cumulReport;
$report->{assistantScores} = join '', @assistantScores if @assistantScores;
$report->{byeScores} = join '', @byeScores;
$report->{role} = join '', \@roles;

$report->{autogen} = "% This file, report.tex was autogenerated on " . localtime() . "by grader.pl out of report.tmpl";
my $template = Text::Template->new(TYPE => 'FILE', SOURCE => 'report.tmpl'
				, DELIMITERS => [ '<TMPL>', '</TMPL>' ] );
open TEX, ">report.tex";
print TEX $template->fill_in( HASH => $report );
