#!/usr/bin/perl

# Last Edit: 2008 Jun 27, 06:20:18 AM
# $Id: /dic/trunk/dic.pl 611 2006-04-19T11:51:32.306642Z greg  $

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

my $man = 0;
my $help = 0;

GetOptions (
	'help|?' => \$help, man => \$man) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

use IO::All;
use YAML qw/LoadFile/;
use Parse::RecDescent;
use Text::Template;
use Cloze qw/cloze/;
use Games::Tournament::RoundRobin;
use Games::League::Member;

my $leagueRound = $ARGV[0];
(my $shortForm = $leagueRound) =~ s/^.*([a-z]\d+)$/$1/;
# my $league = substr( $shortForm, 0, 1);
# (my $league = $leagueRound) =~ s/^(.*[a-z])\d+$/$1/;
my $round = LoadFile("$shortForm.yaml");
# my $league = LoadFile("$ENV{HOME}/$league/register.yaml");
my $league = LoadFile( "../class.yaml" );
my @members = @{$league->{member}};
my %ids = map { $_->{name} => $_->{id} } @members;
my %names = map { $_->{id} => $_->{name} } @members;

my $textSources = $round->{texts};

my $io = io $textSources;
my %text;
while ( my $file = $io->next )
{
	my @lines = $file->getlines;
	$text{$file} = cloze(@lines);

}

my $tmpl = io 'cards.tmpl';
my $tmplString = $tmpl->all;

my $groups = $round->{group};

my @latex = (
		{ page => 1, xy => "8,0" },
		{ page => 1, xy => "0,0" },
		{ page => 1, xy => "8,8" },
		{ page => 1, xy => "0,8" },
		{ page => 2, xy => "8,0" },
		{ page => 2, xy => "0,0" },
		{ page => 2, xy => "8,8" },
		{ page => 2, xy => "0,8" },
		{ page => 3, xy => "8,0" },
		{ page => 3, xy => "0,0" },
		{ page => 3, xy => "8,8" },
		{ page => 3, xy => "0,8" },
	);
my $paging = 0;
my $threepages = 0;

foreach my $group ( keys %$groups )
{
	my @group =  @{$round->{group}->{$group}}; 
	my $k;
	my @lineup = map
	{
		my $playerId = $ids{$_};
		my $member = Games::League::Member->new( 
			index => $k++, name => $_, id => $playerId);
	} @group;
	if ($group eq 'Bye')
	{	
		my $byes = $round->{group}->{Bye};
		foreach my $byer ( @$byes )
		{
			$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$byer $ids{$byer}}
{$byer! No homework needed. Take a break this week. You win 3 points. \\rule{8.5cm}{1pt}}
{$byer $ids{$byer}}
{No homework needed. Take a break this week. You win 3 points. \\rule{8.5cm}{1pt}}
{$byer $ids{$byer}}
{No homework needed. Take a break this week. You win 3 points.}
\\end{textblock}\n";

			&paging;
		}
	}
	else
	{
		my $roundrobin =
		Games::Tournament::RoundRobin->new(v => 3, league => \@lineup);
		my $players;
		$players = $roundrobin->partners('Bye');

		my @text1 = nextText($io, %text);
		my $round1Tester = $roundrobin->partner('Bye',1);
		my $round1Players = $roundrobin->realPartners($round1Tester);
		my @text2 = nextText($io, %text);
		my $round2Tester = $roundrobin->partner('Bye',2);
		my $round2Players = $roundrobin->realPartners($round2Tester);
		my @text3 = nextText($io, %text);
		my $round3Tester = $roundrobin->partner('Bye',3);
		my $round3Players = $roundrobin->realPartners($round3Tester);

		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$round1Tester, testing $round1Players->[0] (Sgd:\\hrulefill) \\& $round1Players->[1](Sgd:\\hrulefill)}
{\\mytest{$round1Tester}}
{$round1Tester with " . $roundrobin->partner($round1Tester,2) . ":}
{$text2[1] \\rule{8.5cm}{1pt}}
{$round1Tester with " . $roundrobin->partner($round1Tester,3) . ":}
{$text3[0]}
\\end{textblock}\n";

		&paging;

		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$round2Tester with " . $roundrobin->partner($round2Tester,1) . ":}
{$text1[0] \\rule{8.5cm}{1pt}}
{$round2Tester, testing $round2Players->[0] (Sgd:\\hrulefill) \\& $round2Players->[1](Sgd:\\hrulefill)}
{\\mytest{$round2Tester}}
{$round2Tester with " . $roundrobin->partner($round2Tester,3) . ":}
{$text3[1]}
\\end{textblock}\n";

		&paging;

		$tmplString .= "
\\begin{textblock}{8}($latex[$paging]->{xy})
\\textblocklabel{picture$latex[$paging]->{xy}}
\\mycard
{$round3Tester with " . $roundrobin->partner($round3Tester,1) . ":}
{$text1[1] \\rule{8.5cm}{1pt}}
{$round3Tester with " . $roundrobin->partner($round3Tester,2) . ":}
{$text2[0] \\rule{8.5cm}{1pt}}
{$round3Tester, testing $round3Players->[0] (Sgd:\\hrulefill) \\& $round3Players->[1](Sgd:\\hrulefill)}
{\\mytest{$round3Tester}}
\\end{textblock}\n";

		&paging;
	}
}

$tmplString .= '
\end{document}
';

my $quiz;
($quiz->{cardIdentifier} = $textSources ) =~ 
				s{.*/(\w+/\w+)/?$}{$1};
$quiz->{autogen} = "% This file, cards.tex was autogenerated on " . localtime() . "by dic.pl out of cards.tmpl";

my $template = Text::Template->new(TYPE => 'STRING', SOURCE => $tmplString
				, DELIMITERS => [ '<TMPL>', '</TMPL>' ] );
open TEX, ">cards.tex";
print TEX $template->fill_in( HASH => $quiz );

sub nextText
{
	my $io = shift;
	my %text = @_;
	my ($nextText, $nextFile);
	if (defined ($nextFile = $io->next)) {
		$nextText = $text{$nextFile};
	}
	else {
		$nextFile = $io->next;
		$nextText = $text{$nextFile};
	}
	my $textA = join '', @{$nextText->{A}};
	my $textB = join '', @{$nextText->{B}};
	return ( $textA, $textB );
}

sub paging
{	if ($paging == 3 or $paging == 7 or $paging == 11 )
	{
		$tmplString .= "
\\begin{tiny}" . ($threepages + $latex[$paging]->{page}) . "\\end{tiny}\\newpage\n\n";
	}
	if ($paging == 11) { $threepages = $threepages+3; $paging = 0; }
	else { $paging++; }
}

__END__

=head1 NAME

Testers scored too

=head1 SYNOPSIS

./dic.pl

./form.pl

./scoresheet.pl

./grade

=head1 DESCRIPTION

Testers are evaluated on their conduct of the competition between the other 2 players in groups of 3.

B<dic.pl> generates 3 forms for the same 3 conversations, in 2 of which each member is a player, and in which the other he/she is a tester.

The checklist used to evaluate the tester on the form includes Good Things: eg, True Signatures, Letter Gaps, Crossing Out, Counts (?), and Bad Things: eg, All Finished, No Errors, Wrong Pen Use, White-Out Use.

B<form.pl> makes up the form for the other side of the piece of paper.

B<scoresheet.pl> creates B<scores.yaml>, a YAML-style template file that can be filled in with the number of letters correct.

B<grade> grades the scores and writes a report.

=cut
