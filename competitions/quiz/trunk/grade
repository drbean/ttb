#!/usr/bin/perl

# Last Edit: 2007 Jun 29, 06:02:53 PM
# $Id: /quiz/trunk/grade 1271 2007-07-02T13:38:19.032123Z greg  $

use strict;
use warnings;

my @roles;

use List::Util qw/reduce sum/;

use Text::Template;
use YAML qw/ LoadFile DumpFile /;
use IO::All;
use Statistics::Descriptive;

my $round = LoadFile( "./round.yaml" );
my $league = LoadFile( "../league.yaml" );
my @members = @{$league->{member}};
my %ids = map { $_->{name} => $_->{id} } @members;
my %names = map { $_->{id} => $_->{name} } @members;
my $absentees = $league->{absent}? $league->{absent}: undef;
my $roundabsent = $round->{absent};
push @$absentees, @$roundabsent if $absentees and $roundabsent;
my ($assistants, $assistantScores);
my $roundN = $round->{round};
if ( -e '../assistants.yaml' )
{
	my $assistantFile = LoadFile '../assistants.yaml';
	$assistants = $assistantFile->{$roundN};
	$assistantScores = $assistantFile->{$roundN} if defined $assistants;
	$assistants = [keys %$assistantScores];
}
elsif ( $round->{assistant} and $round->{assistant} !~ m/No.*ne/ ) {
	$assistants = $round->{assistant};
}
my $byes = $round->{group}->{Bye};
my $win = $round->{scores}->{win} or die "Winner gets $round->{scores}->{win}?";
my $bye = $round->{scores}->{bye};
my $draw = $round->{scores}->{draw};
my $loss = $round->{scores}->{loss};

my $scoresheet = LoadFile "scores.yaml";
my $gradesheets = $league->{hw};
my $prevround = $roundN - 1;
die "Gradesheet for round $roundN, $gradesheets/g$roundN.yaml already exists,"
			if -e "$gradesheets/g$roundN.yaml";
my $prevgradefile = "$gradesheets/g$prevround.yaml";
my $prevgrades = LoadFile( $prevgradefile );

my $calculator = Statistics::Descriptive::Sparse->new;
my $totalClassletters = 0;
my %indScores = ();
my %indScoresByScore = ();
my %groupScores = ();
my %groupScoresByScore = ();
my %points = ();
my %pointsByPoints = ();
my %cumulative = ();
my %swissByName = ();

my $groups = $round->{group};
my @indMatches;

foreach my $group ( keys %$groups )
{
	my %group =  %{$groups->{$group}}; 
	@roles = keys %group;
	my @group = values %group;
	my $groupScore = 0;
	if (grep { $_ eq 'Bye' } @roles )
	{	
		my @byes = map { $ids{$_} } @group;
		for (@byes)
		{
			$points{$_} = $bye;
			$swissByName{$names{$_}} = 'Bye';
			push @{$pointsByPoints{$bye}}, "$names{$_} $_  \\\\";
			die "$_ has $points{$_}?" unless $_ && exists 
			$prevgrades->{cumulative}->{$_} && exists $points{$_};
			$cumulative{$_} = $prevgrades->{cumulative}->{$_} +
								$points{$_};
		}
	}
	else
	{
		my $indMatch = "$group&";
		my (@nohomework, @groupAllocation);
		my %correct = map {
			my $role = $_;
			my $name = $round->{group}->{$group}->{$role};
			my $score = $scoresheet->{$group}->{$name};
			$name => $score;
		} @roles;
		foreach my $player ( @group )
		{
			my %roles = reverse %group;
			my $role = $roles{$player};
			my $playerId = $ids{$player} 
				or die "Group $group ${player}'s id?";
                        die "group is $group?" unless defined $group;
			$groupScore += $correct{$player};
			$totalClassletters += $correct{$player};
			my $participationScore = 
			$scoresheet->{$group}->{$player};
			die "$player particpation?" unless
					defined $participationScore;
			if ( $participationScore )
			{
				push @groupAllocation, $playerId;
				my $indScore;
				$indScore = $participationScore?
					$correct{$player}: 0;
				$indScores{$playerId} = $indScore;
				push @{$indScoresByScore{$indScore}},
				"$player $playerId ($group)\\\\";
			}
			else {
				push @nohomework, $playerId;
				$indScores{$playerId} = 0;
				 $indScores{$playerId} = 0;
				push @{$indScoresByScore{"No play"}},
				"$group. $player $playerId\\\\";
			}
		}
		my $winner;
		if ( @nohomework )
		{
			@swissByName{@group} = map { 
				(grep m/$_/, @names{@nohomework})?
				'Absent': 'Win';} @group;
		}
		else
		{	
			$winner = $correct{$group[0]} > $correct{$group[1]} ?
				$group[0]:
				$correct{$group[0]} < $correct{$group[1]}?
				$group[1]: (rand( 2 ) < 1)?
				$group[0]: $group[1];
			@swissByName{@group} = map
				{ ($_ eq $winner)?
					'Win': 'Loss'; } @group;
		}
	}
	$groupScores{$group} = $groupScore / @group;
	$calculator->add_data($groupScores{$group});
}

my $meanLetters = $calculator->mean;
my $stdev = $calculator->standard_deviation;
my $topLetters = $calculator->max;
my $boobyLetters = $calculator->min;
sub zscore { (shift() - $meanLetters) / $stdev };
my $topScore = zscore($topLetters);
my $boobyScore = zscore($boobyLetters);
my $zUnit = ($win - $loss) / ($topScore - $boobyScore);
my $averagePrize = $loss - $boobyScore * $zUnit;
my %zScores;
for my $group ( keys %$groups )
{
	my @group = values %{$groups->{$group}};
	my @groupsIds = @ids{@group};
	my $zScore = zscore($groupScores{$group});
	my $points = sprintf( "%.1f", $averagePrize + $zScore * $zUnit );
	my @memberScores = map { "$names{$_}($indScores{$_})" }
							@groupsIds;
	push @{$groupScoresByScore{$points}},
	# "$group. Winner: $winnerName, @memberScores\\\\ ";
	# "$group. $winnerName ($winner)\\\\ "
		"$group. $groupScores{$group} questions.\\\\ ";
	for my $id ( @groupsIds )
	{
		my $name = $names{$id};
		$points{$id} = $points;
		push @{$pointsByPoints{$points}}, "$name $id\\\\";
		die "$name has $points?" unless $id && $name &&
			exists $prevgrades->{cumulative}->{$id} &&
						defined $points;
		$cumulative{$id} = $prevgrades->{cumulative}->{$id} +
							$points;
	}
}

if ($absentees)
{
	 for ( @ids{@$absentees} )
	{	
		$points{$_} = 0;
		$cumulative{$_} = $prevgrades->{cumulative}->{$_} + $points{$_};
	}
}
for my $id ( keys %names )
{
	die "$names{$id} $_ has $points{$id} points?" unless $id && 
		exists $prevgrades->{cumulative}->{$id} && exists $points{$id};
	$cumulative{$id} = $prevgrades->{cumulative}->{$id} + $points{$id};
}
my %cumulativeByGrades = ();
push @{$cumulativeByGrades{$cumulative{$_}}}, "$names{$_} $_ \\\\ "
					foreach keys %names;
my $grades;
$grades->{cumulative} = \%cumulative;
$grades->{$roundN} = \%points;
my %pairingNumberGrades;
for my $member ( @members )
{
	$pairingNumberGrades{$member->{pairingnumber}} = $points{$member->{id}} 
				if $member->{pairingnumber};
	
}

DumpFile( "$gradesheets/cumulative.yaml", \%cumulative );
DumpFile( "$gradesheets/g$roundN.yaml", $grades );
DumpFile( "$gradesheets/p$roundN.yaml", \%pairingNumberGrades );
DumpFile( "$gradesheets/$roundN.yaml", \%swissByName );
DumpFile( "round.yaml", $round );

@{$pointsByPoints{$_}} = sort @{$pointsByPoints{$_}} foreach keys %pointsByPoints;
@{$cumulativeByGrades{$_}} = sort @{$cumulativeByGrades{$_}}
						foreach keys %cumulativeByGrades;
my @indReport = map
	{ "\\vspace{-0.4cm} \\item [$_:] \\hspace*{0.5cm}\\\\@{$indScoresByScore{$_}}" }
		sort {$a cmp $b} keys %indScoresByScore;
my @groupReport = map 
	{ "\\vspace{-0.4cm} \\item [$_:] \\hspace*{0.5cm}\\\\@{$groupScoresByScore{$_}}" }
		sort {$a<=>$b} keys %groupScoresByScore;
my @pointReport = map 
	{ "\\vspace{-0.4cm} \\item [$_:] \\hspace*{-0.5cm}\\\\@{$pointsByPoints{$_}}" }
		sort {$a<=>$b} keys %pointsByPoints; # XXX move to left someway
my @cumulReport = map 
	{ "\\vspace{-0.4cm} \\item [$_:] \\hspace*{0.5cm}\\\\@{$cumulativeByGrades{$_}}" }
		sort {$a<=>$b} keys %cumulativeByGrades;
my @assistantScores = map
	{ "\\vspace{-0.4cm} $_: $assistantScores->{$roundN}->{$_} \\hspace{0.5cm}" }
			@$assistants if $assistants;
my @byeScores = map
	{ "\\vspace{-0.4cm} $_: $points{$ids{$_}} \\hspace{0.5cm}" }
								@$byes;

my $report;
$report->{league} = $league->{league};
$report->{week} = $round->{week};
$report->{round} = $roundN;
$report->{indMatches} = join '', sort @indMatches;
$report->{indScores} = join '', @indReport;
$report->{groupScores} = join '', @groupReport;
$report->{points} = join '', @pointReport;
$report->{grades} = join '', @cumulReport;
$report->{assistantScores} = join '', @assistantScores if @assistantScores;
$report->{byeScores} = join '', @byeScores;
$report->{role} = join '', \@roles;

$report->{autogen} = "% This file, report.tex was autogenerated on " . localtime() . "by grader.pl out of report.tmpl";
my $template = Text::Template->new(TYPE => 'FILE', SOURCE => 'report.tmpl'
				, DELIMITERS => [ '<TMPL>', '</TMPL>' ] );
open TEX, ">report.tex";
print TEX $template->fill_in( HASH => $report );
